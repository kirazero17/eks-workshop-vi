[
{
	"uri": "//localhost:1400/vi/6-container-insights-on-eks/6.1-enabling-container-insights/",
	"title": "Container Insights on EKS",
	"tags": [],
	"description": "",
	"content": "Kích hoạt Container Insights sử dụng AWS Distro for OpenTelemetry Trong bài thực hành này, chúng ta sẽ tìm hiểu cách kích hoạt các số liệu Container Insights của CloudWatch bằng cách sử dụng ADOT Collector cho một cụm EKS.\nBây giờ, hãy tạo các tài nguyên để cấp quyền cho ADOT Collector theo đúng những gì nó cần. Chúng ta sẽ bắt đầu với ClusterRole, cung cấp quyền cho collector để truy cập API của Kubernetes: ~/environment/eks-workshop/modules/observability/container-insights/adot/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\rkind: ClusterRole\rmetadata:\rname: otel-ci-role\rrules:\r- apiGroups: [\u0026#34;\u0026#34;]\rresources: [\u0026#34;pods\u0026#34;, \u0026#34;nodes\u0026#34;, \u0026#34;endpoints\u0026#34;]\rverbs: [\u0026#34;list\u0026#34;, \u0026#34;watch\u0026#34;, \u0026#34;get\u0026#34;]\r- apiGroups: [\u0026#34;apps\u0026#34;]\rresources: [\u0026#34;replicasets\u0026#34;]\rverbs: [\u0026#34;list\u0026#34;, \u0026#34;watch\u0026#34;, \u0026#34;get\u0026#34;]\r- apiGroups: [\u0026#34;batch\u0026#34;]\rresources: [\u0026#34;jobs\u0026#34;]\rverbs: [\u0026#34;list\u0026#34;, \u0026#34;watch\u0026#34;]\r- apiGroups: [\u0026#34;\u0026#34;]\rresources: [\u0026#34;nodes/proxy\u0026#34;]\rverbs: [\u0026#34;get\u0026#34;]\r- apiGroups: [\u0026#34;\u0026#34;]\rresources: [\u0026#34;nodes/stats\u0026#34;, \u0026#34;configmaps\u0026#34;, \u0026#34;events\u0026#34;]\rverbs: [\u0026#34;create\u0026#34;, \u0026#34;get\u0026#34;]\r- apiGroups: [\u0026#34;\u0026#34;]\rresources: [\u0026#34;configmaps\u0026#34;]\rverbs: [\u0026#34;update\u0026#34;]\r- apiGroups: [\u0026#34;\u0026#34;]\rresources: [\u0026#34;configmaps\u0026#34;]\rresourceNames: [\u0026#34;otel-container-insight-clusterleader\u0026#34;]\rverbs: [\u0026#34;get\u0026#34;,\u0026#34;update\u0026#34;, \u0026#34;create\u0026#34;]\r- apiGroups: [\u0026#34;coordination.k8s.io\u0026#34;]\rresources: [\u0026#34;leases\u0026#34;]\rverbs: [\u0026#34;create\u0026#34;,\u0026#34;get\u0026#34;, \u0026#34;update\u0026#34;]\r- apiGroups: [\u0026#34;coordination.k8s.io\u0026#34;]\rresources: [\u0026#34;leases\u0026#34;]\rresourceNames: [\u0026#34;otel-container-insight-clusterleader\u0026#34;]\rverbs: [\u0026#34;get\u0026#34;,\u0026#34;update\u0026#34;, \u0026#34;create\u0026#34;] Chúng ta sẽ sử dụng chính sách IAM quản lý CloudWatchAgentServerPolicy để cung cấp cho bộ thu thập các quyền IAM cần thiết thông qua IAM Roles for Service Accounts. aws iam list-attached-role-policies \\\r--role-name eks-workshop-adot-collector-ci | jq . Vai trò IAM này sẽ được thêm vào ServiceAccount cho bộ thu thập: ~/environment/eks-workshop/modules/observability/container-insights/adot/serviceaccount.yaml\napiVersion: v1\rkind: ServiceAccount\rmetadata:\rname: adot-collector-ci\rannotations:\reks.amazonaws.com/role-arn: ${ADOT_IAM_ROLE_CI} Tạo tài nguyên: kubectl kustomize ~/environment/eks-workshop/modules/observability/container-insights/adot \\\r| envsubst | kubectl apply -f-\rkubectl rollout status -n other daemonset/adot-container-ci-collector --timeout=120s Thông số kỹ thuật cho bộ thu thập quá dài để hiển thị ở đây, nhưng bạn có thể xem nó như sau: kubectl -n other get opentelemetrycollector adot-container-ci Hãy chia nhỏ thành từng phần để hiểu rõ hơn về những gì đã được triển khai. Đây là cấu hình của bộ thu thập OpenTelemetry: kubectl -n other get opentelemetrycollector adot-container-ci -o jsonpath=\u0026#39;{.spec.config}\u0026#39; Dưới đây là cấu hình một OpenTelemetry pipeline với cấu trúc sau: Receivers\nReceiver Container Insights được thiết kế để thu thập sự kiện nhật ký hiệu suất bằng Embedded Metric Format. Processors\nGom nhóm các chỉ số vào các khoảng thời gian 60 giây. Exporters\nCloudWatch EMF exporter gửi các chỉ số đến API CloudWatch. Bộ thu này cũng được cấu hình để chạy như một DaemonSet với một đại lý thu thập chạy trên mỗi nút.\nkubectl -n other get opentelemetrycollector adot-container-ci -o jsonpath=\u0026#39;{.spec.mode}{\u0026#34;\\n\u0026#34;}\u0026#39; Chúng tôi có thể xác nhận điều đó bằng cách kiểm tra các Pods thu thập ADOT Container Insights metrics đang chạy: kubectl get pods -n other Nếu kết quả của lệnh này bao gồm nhiều pods ở trạng thái Running như hiển thị (phía trên), bộ thu thập đang chạy và thu thập các số liệu từ cụm. Bộ thu thập tạo một nhóm log có tên là aws/containerinsights/cluster-name/performance và gửi dữ liệu số liệu dưới dạng sự kiện log hiệu suất theo định dạng EMF.\n"
},
{
	"uri": "//localhost:1400/vi/4-logging-in-eks/4.1-control-plane-logs/4.1.1-configuring-control-plane-logs/",
	"title": "Control plane logs",
	"tags": [],
	"description": "",
	"content": "Configuring control plane logs Để kích hoạt các nhật ký điều khiển EKS được thực hiện trên mỗi cụm thông qua API EKS. Thông thường, điều này sẽ được cấu hình bằng Terraform hoặc CloudFormation, nhưng trong lab này chúng ta sẽ sử dụng AWS CLI để kích hoạt chức năng này:\naws eks update-cluster-config \\\r--region $AWS_REGION \\\r--name $EKS_CLUSTER_NAME \\\r--logging \u0026#39;{\u0026#34;clusterLogging\u0026#34;:[{\u0026#34;types\u0026#34;:[\u0026#34;api\u0026#34;,\u0026#34;audit\u0026#34;,\u0026#34;authenticator\u0026#34;,\u0026#34;controllerManager\u0026#34;,\u0026#34;scheduler\u0026#34;],\u0026#34;enabled\u0026#34;:true}]}\u0026#39;\rsleep 30\raws eks wait cluster-active --name $EKS_CLUSTER_NAME Như bạn có thể thấy, chúng ta có thể kích hoạt từng loại log của cluster một cách riêng biệt, và trong bài lab này, chúng ta đang kích hoạt tất cả mọi thứ.\nHãy xem cấu hình này trên bảng điều khiển EKS:\nhttps://console.aws.amazon.com/eks/home#/clusters/eks-workshop?selectedTab=cluster-logging-tab\nTab Logging hiển thị cấu hình hiện tại cho log của điều khiển cho cluster:\nBạn có thể điều chỉnh cấu hình ghi nhật ký bằng cách nhấp vào nút Quản lý: Manage\n"
},
{
	"uri": "//localhost:1400/vi/4-logging-in-eks/4.1-control-plane-logs/",
	"title": "Control plane logs",
	"tags": [],
	"description": "",
	"content": "Control plane logs Chuẩn bị môi trường cho phần này:\nprepare-environment observability/logging/cluster Amazon EKS control plane logging cung cấp nhật ký kiểm tra và chẩn đoán trực tiếp từ lớp điều khiển Amazon EKS đến CloudWatch Logs trong tài khoản của bạn. Nhật ký này giúp bạn dễ dàng bảo mật và vận hành các cụm của mình. Bạn có thể chọn chính xác loại nhật ký bạn cần và nhật ký được gửi dưới dạng luồng nhật ký đến một nhóm cho mỗi cụm Amazon EKS trong CloudWatch.\nBạn có thể kích hoạt hoặc vô hiệu hóa mỗi loại nhật ký trên cơ sở từng cụm bằng cách sử dụng Bảng điều khiển Quản lý AWS, AWS CLI (phiên bản 1.16.139 trở lên) hoặc thông qua API Amazon EKS.\nKhi bạn sử dụng nhật ký điều khiển Amazon EKS, bạn sẽ bị tính phí theo giá cơ bản của Amazon EKS cho mỗi cụm bạn chạy cùng với các chi phí tiếp nhận và lưu trữ dữ liệu nhật ký CloudWatch thông thường cho bất kỳ nhật ký nào được gửi đến CloudWatch Logs từ các cụm của bạn.\nCác loại nhật ký điều khiển cụm sau đây có sẵn. Mỗi loại nhật ký tương ứng với một thành phần của bảng điều khiển Kubernetes. Để tìm hiểu thêm về các thành phần này, xem Các thành phần Kubernetes trong tài liệu Kubernetes.\nNhật ký thành phần máy chủ API Kubernetes (api) – Máy chủ API của cụm của bạn là thành phần bảng điều khiển mà tiếp xúc với API Kubernetes. Kiểm tra (audit) – Nhật ký kiểm tra Kubernetes cung cấp một bản ghi về các người dùng, quản trị viên hoặc các thành phần hệ thống cá nhân đã ảnh hưởng đến cụm của bạn. Xác thực viên (authenticator) – Nhật ký xác thực viên là duy nhất đối với Amazon EKS. Nhật ký này đại diện cho thành phần bảng điều khiển mà Amazon EKS sử dụng cho Xác thực dựa trên Vai trò (RBAC) của Kubernetes bằng cách sử dụng các thông tin xác thực IAM. Bộ điều khiển quản lý (controllerManager) – Bộ điều khiển quản lý quản lý các vòng lặp điều khiển cốt lõi được gửi kèm với Kubernetes. Lập lịch (scheduler) – Thành phần lập lịch quản lý khi nào và nơi chạy các pod trong cụm của bạn. "
},
{
	"uri": "//localhost:1400/vi/1-introduce/1.1-monitor-cluster-components/",
	"title": "Giám sát Cluster Kubernetes",
	"tags": [],
	"description": "",
	"content": "Giám sát Cluster Kubernetes Trong phần này, chúng ta sẽ tìm hiểu về việc giám sát cluster Kubernetes.\nGiám sát Tiêu Thụ Tài Nguyên trong Kubernetes Làm thế nào bạn có thể giám sát việc tiêu thụ tài nguyên trong Kubernetes? Hoặc quan trọng hơn, bạn muốn giám sát những gì?\nHeapster vs Metrics Server Heapster hiện đã được loại bỏ và một phiên bản thu gọn hơn được hình thành được biết đến là metrics server.\nMetrics Server Làm thế nào các metric được tạo ra cho các POD trên các node này?\nMetrics Server - Bắt Đầu Sao chép metric server từ kho github\n$ git clone https://github.com/kubernetes-incubator/metrics-server.git Triển khai metric server\n$ kubectl create -f metric-server/deploy/1.8+/ Xem hiệu suất của cluster\n$ kubectl top node Xem các metric hiệu suất của pod\n$ kubectl top pod "
},
{
	"uri": "//localhost:1400/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Giới thiệu Observability là một phần cơ bản của một môi trường EKS được thiết kế tốt\nObservability là một yếu tố cơ bản của một môi trường EKS được thiết kế tốt. AWS cung cấp các giải pháp Observability cơ bản (CloudWatch) và quản lý mã nguồn mở (Amazon Managed Service for Prometheus, Amazon Managed Grafana và AWS Distro for OpenTelemetry) cho việc theo dõi, ghi nhật ký, cảnh báo và tạo bảng điều khiển của các môi trường EKS.\nTrong chương này, chúng ta sẽ tìm hiểu cách bạn có thể sử dụng các giải pháp Observability của AWS tích hợp với EKS để cung cấp khả năng nhìn thấy vào:\nCác Tài nguyên Kubernetes trong giao diện EKS console Ghi nhật ký Control Plane và Pod sử dụng Fluentbit Theo dõi Metrics với CloudWatch Container Insights Theo dõi Metrics EKS với AMP và ADOT. "
},
{
	"uri": "//localhost:1400/vi/",
	"title": "Observability",
	"tags": [],
	"description": "",
	"content": "Observability là một phần cơ bản của một môi trường EKS được thiết kế tốt Observability là một yếu tố cơ bản của một môi trường EKS được thiết kế tốt. AWS cung cấp các giải pháp Observability cơ bản (CloudWatch) và quản lý mã nguồn mở (Amazon Managed Service for Prometheus, Amazon Managed Grafana và AWS Distro for OpenTelemetry) cho việc theo dõi, ghi nhật ký, cảnh báo và tạo bảng điều khiển của các môi trường EKS.\nTrong chương này, chúng ta sẽ tìm hiểu cách bạn có thể sử dụng các giải pháp Observability của AWS tích hợp với EKS để cung cấp khả năng nhìn thấy vào:\nCác Tài nguyên Kubernetes trong giao diện EKS console Ghi nhật ký Control Plane và Pod sử dụng Fluentbit Theo dõi Metrics với CloudWatch Container Insights Theo dõi Metrics EKS với AMP và ADOT. "
},
{
	"uri": "//localhost:1400/vi/5-eks-open-source-observability/5.1-aws-distro/",
	"title": "Scraping metrics sử dụng AWS Distro cho OpenTelemetry",
	"tags": [],
	"description": "",
	"content": "Scraping metrics sử dụng AWS Distro cho OpenTelemetry Trong thí nghiệm này, chúng ta sẽ lưu trữ các metric trong một không gian làm việc Amazon Managed Service for Prometheus đã được tạo sẵn cho bạn. Bạn có thể thấy nó trong bảng điều khiển:\nhttps://console.aws.amazon.com/prometheus/home#/workspaces\nĐể xem không gian làm việc, nhấp vào tab All Workspaces trên bảng điều khiển bên trái. Chọn không gian làm việc bắt đầu bằng eks-workshop và bạn có thể xem một số tab khác nhau dưới không gian làm việc như quản lý luật, quản lý cảnh báo, v.v.\nĐể thu thập các metric từ Cụm Amazon EKS, chúng ta sẽ triển khai một tài nguyên tùy chỉnh OpenTelemetryCollector. Toán tử ADOT chạy trên cụm EKS phát hiện sự hiện diện hoặc thay đổi của tài nguyên này và cho bất kỳ thay đổi nào như vậy, toán tử thực hiện các hành động sau:\nXác minh rằng tất cả các kết nối cần thiết cho các yêu cầu tạo, cập nhật hoặc xóa này đến máy chủ API Kubernetes có sẵn. Triển khai các phiên bản thu thập ADOT theo cách mà người dùng đã biểu diễn trong cấu hình tài nguyên OpenTelemetryCollector. Bây giờ, hãy tạo tài nguyên để cho phép bộ thu ADOT các quyền mà nó cần. Chúng ta sẽ bắt đầu bằng ClusterRole mà cung cấp các quyền cho bộ thu truy cập vào API Kubernetes:\n~/environment/eks-workshop/modules/observability/oss-metrics/adot/clusterrole.yaml\napiVersion: rbac.authorization.k8s.io/v1\rkind: ClusterRole\rmetadata:\rname: otel-prometheus-role\rrules:\r- apiGroups:\r- \u0026#34;\u0026#34;\rresources:\r- nodes\r- nodes/proxy\r- services\r- endpoints\r- pods\rverbs:\r- get\r- list\r- watch\r- apiGroups:\r- extensions\rresources:\r- ingresses\rverbs:\r- get\r- list\r- watch\r- nonResourceURLs:\r- /metrics\rverbs:\r- get Chúng ta sẽ sử dụng chính sách IAM quản lý AmazonPrometheusRemoteWriteAccess để cung cấp cho bộ thu thập quyền IAM mà nó cần thông qua IAM Roles for Service Accounts:\naws iam list-attached-role-policies \\\r--role-name $EKS_CLUSTER_NAME-adot-collector | jq . IAM role này sẽ được thêm vào ServiceAccount cho collector:\n~/environment/eks-workshop/modules/observability/oss-metrics/adot/serviceaccount.yaml\napiVersion: v1\rkind: ServiceAccount\rmetadata:\rname: adot-collector\rannotations:\reks.amazonaws.com/role-arn: ${ADOT_IAM_ROLE} Tạo các tài nguyên:\nkubectl kustomize ~/environment/eks-workshop/modules/observability/oss-metrics/adot \\\r| envsubst | kubectl apply -f-\rkubectl rollout status -n other deployment/adot-collector --timeout=120s Thông số kỹ thuật cho bộ thu là quá dài để hiển thị ở đây, nhưng bạn có thể xem nó như sau:\nkubectl -n other get opentelemetrycollector adot -o yaml Hãy phân tích thành các phần để hiểu rõ hơn về những gì đã được triển khai. Đây là cấu hình của bộ thu thập OpenTelemetry:\nkubectl -n other get opentelemetrycollector adot -o jsonpath=\u0026#39;{.spec.config}\u0026#39; | yq Dưới đây là cấu hình một OpenTelemetry pipeline với cấu trúc sau:\nReceivers\nPrometheus receiver: được thiết kế để thu thập số liệu từ các mục tiêu mà mở ra một điểm cuối Prometheus.\nProcessors\nKhông có trong ống dẫn này.\nExporters\nPrometheus remote write exporter: gửi số liệu tới một điểm cuối ghi xa Prometheus như AMP.\nCollector này cũng được cấu hình để chạy như một Deployment với một đại diện của bộ thu thập đang chạy.\nkubectl -n other get opentelemetrycollector adot -o jsonpath=\u0026#39;{.spec.mode}{\u0026#34;\\n\u0026#34;}\u0026#39; Chúng ta có thể xác nhận điều này bằng cách kiểm tra các Pods thu thập ADOT đang chạy:\nkubectl get pods -n other "
},
{
	"uri": "//localhost:1400/vi/4-logging-in-eks/4.2-pod-logging/4.2.1-using-fluent-bit/",
	"title": "Using Fluent Bit",
	"tags": [],
	"description": "",
	"content": "Sử dụng Fluent Bit Đối với các thành phần của cụm Kubernetes chạy trong các pod, chúng ghi vào các tệp trong thư mục /var/log, bỏ qua cơ chế ghi nhật ký mặc định. Chúng ta có thể triển khai ghi nhật ký ở mức pod bằng cách triển khai một đại diện ghi nhật ký ở mức nút dưới dạng DaemonSet trên mỗi nút, chẳng hạn như Fluent Bit.\nFluent Bit là một trình xử lý nhật ký nhẹ và chuyển tiếp cho phép bạn thu thập dữ liệu và nhật ký từ các nguồn khác nhau, làm phong phú chúng bằng bộ lọc và gửi chúng đến nhiều địa điểm như CloudWatch, Kinesis Data Firehose, Kinesis Data Streams và Dịch vụ Amazon OpenSearch.\nAWS cung cấp một hình ảnh Fluent Bit với các plugin cho cả CloudWatch Logs và Kinesis Data Firehose. Hình ảnh AWS cho Fluent Bit có sẵn trên Amazon ECR Public Gallery.\nTrong phần tiếp theo, bạn sẽ thấy cách xác nhận rằng đại diện Fluent Bit đang chạy như một DaemonSet để gửi nhật ký của các container/pod đến CloudWatch Logs.\nTrước tiên, chúng ta có thể xác nhận các tài nguyên được tạo cho Fluent Bit bằng cách nhập lệnh sau. Mỗi nút nên có một pod:\nkubectl get all -n aws-for-fluent-bit ConfigMap cho aws-for-fluent-bit được cấu hình để stream nội dung của các tệp trong thư mục /var/log/containers/*.log từ mỗi node đến nhóm log CloudWatch /eks-workshop/worker-fluentbit-logs:\nkubectl describe configmaps -n aws-for-fluent-bit "
},
{
	"uri": "//localhost:1400/vi/3-view-resources-in-eks-console/3.1-workloads/",
	"title": "Workloads",
	"tags": [],
	"description": "",
	"content": "Để xem các tài nguyên Kubernetes, nhấp vào tab Resources. Tiến sâu vào phần Workload và bạn có thể xem một số loại tài nguyên API Kubernetes nằm trong phần công việc. Công việc bao gồm các container đang chạy trong cụm của bạn, và bao gồm Pods, ReplicaSets, Deployments, và DaemonSets. Đây là các khối cơ bản cho việc chạy các container trong một cụm.\nWorkloads Pods Pods resource view hiển thị tất cả các pods đại diện cho đối tượng Kubernetes nhỏ nhất và đơn giản nhất.\nMặc định, tất cả các loại tài nguyên API Kubernetes được hiển thị, nhưng bạn có thể lọc theo namespace hoặc tìm kiếm các giá trị cụ thể để nhanh chóng tìm thấy điều bạn đang tìm kiếm. Dưới đây, bạn sẽ thấy các pods được lọc theo namespace=catalog. Xem tài nguyên cho tất cả các loại tài nguyên API Kubernetes, cung cấp hai chế độ xem - cấu trúc và raw. Chế độ xem cấu trúc cung cấp một biểu diễn hình ảnh của tài nguyên để giúp truy cập dữ liệu cho tài nguyên. Trong ví dụ này (dưới đây), bạn có thể thấy một chế độ xem cấu trúc cho pod catalog phân chia thông tin pod thành các phần Info, Containers, Labels và Annotations. Nó cũng mô tả replicaset, namespace và node liên quan. Chế độ xem raw hiển thị đầu ra JSON đầy đủ từ API Kubernetes, có ích để hiểu cấu hình và trạng thái của các loại tài nguyên không có sự hỗ trợ xem cấu trúc trong bảng điều khiển Amazon EKS. Trong ví dụ xem raw, chúng tôi hiển thị chế độ xem raw cho pod catalog. ReplicaSets Một ReplicaSet là một đối tượng Kubernetes đảm bảo một tập hợp ổn định các replica pods luôn chạy. Do đó, nó thường được sử dụng để đảm bảo sẵn có một số lượng xác định các pods giống nhau. Trong ví dụ này (dưới đây), bạn có thể thấy 2 replicasets cho namespace orders. ReplicaSet cho orders-d6b4566fc xác định cấu hình cho số lượng pods mong muốn và hiện tại.\nNhấp vào replicaset orders-d6b4566fc và khám phá cấu hình. Bạn sẽ thấy các cấu hình dưới Info, Pods, nhãn và chi tiết của replica tối đa và mong muốn.\nDaemonSet DaemonSet đảm bảo rằng tất cả (hoặc một số) Nodes chạy một bản sao của một pod. Trong ứng dụng mẫu, chúng ta có DaemonSet chạy trên mỗi node như được hiển thị (dưới đây).\nNhấp vào daemonset kube-proxy và khám phá cấu hình. Bạn sẽ thấy các cấu hình dưới phần Thông tin, các pod đang chạy trên mỗi node, nhãn và chú thích.\nDeployments Deployment là một đối tượng Kubernetes cho phép cập nhật khai báo cho các pods và replicaSets. Nó cho Kubernetes biết cách tạo ra hoặc sửa đổi các phiên bản của pods. Các Deployment giúp tự động mở rộng số lượng replica pods và cho phép phát hành hoặc quay lùi phiên bản triển khai một cách có kiểm soát. Trong ví dụ này (dưới đây), bạn có thể thấy 2 deployments cho namespace carts.\nNhấp vào deployment orders và khám phá cấu hình. Bạn sẽ thấy chiến lược triển khai dưới mục Info, chi tiết pod dưới mục Pods, các nhãn và phiên bản triển khai.\n"
},
{
	"uri": "//localhost:1400/vi/2-prerequiste/",
	"title": "Các Bước Chuẩn Bị",
	"tags": [],
	"description": "",
	"content": "Các Bước Chuẩn Bị Chuẩn bị môi trường cho phần này:\n$ prepare-environment Trong phần thực hành này, chúng ta sẽ xem tất cả các loại tài nguyên API Kubernetes bằng cách sử dụng Bảng điều khiển Quản lý AWS cho Amazon EKS. Bạn sẽ có thể xem và khám phá tất cả các loại tài nguyên API Kubernetes tiêu chuẩn như cấu hình, tài nguyên phân quyền, tài nguyên chính sách, tài nguyên dịch vụ và nhiều hơn nữa. Xem tài nguyên Kubernetes được hỗ trợ cho tất cả các cụm Kubernetes được lưu trữ bởi Amazon EKS. Bạn có thể sử dụng Amazon EKS Connector để đăng ký và kết nối bất kỳ cụm Kubernetes phù hợp nào vào AWS và hiển thị nó trong bảng điều khiển Amazon EKS.\nChúng ta sẽ xem các tài nguyên được tạo ra bởi ứng dụng mẫu. Lưu ý rằng bạn chỉ sẽ thấy các tài nguyên mà bạn có quyền RBAC để truy cập, được tạo ra trong quá trình chuẩn bị môi trường.\n"
},
{
	"uri": "//localhost:1400/vi/3-view-resources-in-eks-console/3.2-cluster/",
	"title": "Cluster",
	"tags": [],
	"description": "",
	"content": "Cluster Để xem tài nguyên của cụm Kubernetes, nhấp vào tab Resources. Tiếp tục vào phần Cluster, bạn có thể xem nhiều loại tài nguyên API Kubernetes nếu chúng là một phần của cụm. Chi tiết xem cụm hiển thị tất cả các thành phần của kiến trúc cụm như Nodes, Namespaces và API Services chạy các công việc.\nNodes Kubernetes chạy công việc của bạn bằng cách đặt các container vào các pod để chạy trên các Node. Một node có thể là máy ảo hoặc máy vật lý, tùy thuộc vào cụm. Cụm eks-workshop đang chạy 3 node với các công việc được triển khai trên đó. Nhấp vào Nodes để liệt kê các node.\nNếu bạn nhấp vào bất kỳ tên node nào, bạn sẽ tìm thấy phần Thông tin có rất nhiều chi tiết về node - hệ điều hành, container runtime, loại instance, EC2 instance và Managed node group (giúp việc cung cấp khả năng tính toán cho cụm trở nên dễ dàng). Phần tiếp theo, Phân bổ dung lượng, hiển thị việc sử dụng và đặt hàng của các tài nguyên khác nhau trên các node worker EC2 được kết nối vào cụm.\nPhần tiếp theo, Pods, mô tả tất cả các pod được triển khai trên node. Trong ví dụ này, có 12 pod đang chạy trên node này.\nPhần tiếp theo mô tả bất kỳ Taints, nhãn và chú thích nào có liên quan.\nNamespaces Namespaces là một cơ chế để tổ chức các cụm (clusters), có thể rất hữu ích khi các nhóm hoặc dự án khác nhau chia sẻ một cụm Kubernetes. Trong ứng dụng mẫu của chúng ta, chúng ta có các dịch vụ nhỏ - carts, checkout, catalog, assets mà tất cả đều chia sẻ cùng một cụm sử dụng cấu trúc namespace.\n"
},
{
	"uri": "//localhost:1400/vi/6-container-insights-on-eks/6.2-container-insights/",
	"title": "Container Insights metrics in Amazon CloudWatch",
	"tags": [],
	"description": "",
	"content": "Metrics Container Insights trong Amazon CloudWatch Trong bài thực hành này, chúng ta sẽ trực quan hóa các metrics Container Insights bằng cách sử dụng CloudWatch.\nĐể xem các metrics, trước tiên hãy mở bảng điều khiển CloudWatch và điều hướng đến Container Insights: https://console.aws.amazon.com/cloudwatch/home#container-insights:infrastructure\nChọn \u0026ldquo;Performance Monitoring\u0026rdquo; từ menu dropdown ở đầu trang, và sau đó chọn loại tài nguyên mà bạn muốn xem. Ví dụ, chọn \u0026ldquo;EKS Pods\u0026rdquo; để có các metrics cơ bản như CPU, bộ nhớ và sự sử dụng cho các Pods đang chạy trong cụm EKS của chúng ta:\nBạn có thể thiết lập một cảnh báo CloudWatch trên bất kỳ metric nào mà Container Insights thu thập.\n"
},
{
	"uri": "//localhost:1400/vi/5-eks-open-source-observability/5.2-storing-metrics-with-amp/",
	"title": "Lưu trữ số liệu với AMP",
	"tags": [],
	"description": "",
	"content": "Lưu trữ số liệu với AMP Một không gian làm việc Amazon Managed Service for Prometheus đã được tạo sẵn cho bạn. Bạn có thể xem nó trong bảng điều khiển tại đây:\nhttps://console.aws.amazon.com/prometheus/home#/workspaces\nĐể xem không gian làm việc, hãy nhấp vào tab Tất cả các Không gian làm việc ở bảng điều khiển điều khiển bên trái. Chọn không gian làm việc bắt đầu bằng eks-workshop và bạn có thể xem nhiều tab khác nhau dưới không gian làm việc như quản lý quy tắc, quản lý cảnh báo, v.v.\nHãy xác nhận việc chúng ta đã thành công trong việc nhập các số liệu:\nawscurl -X POST --region $AWS_REGION --service aps \u0026#34;${AMP_ENDPOINT}api/v1/query?query=up\u0026#34; | jq \u0026#39;.data.result[1]\u0026#39; "
},
{
	"uri": "//localhost:1400/vi/1-introduce/1.2-managing-application-logs/",
	"title": "Managing Application Logs",
	"tags": [],
	"description": "",
	"content": "Bắt đầu với logging trong Docker:\nLogs - Kubernetes\rapiVersion: v1\rkind: Pod\rmetadata:\rname: event-simulator-pod\rspec:\rcontainers:\r- name: event-simulator\rimage: kodekloud/event-simulator Để xem logs:\n$ kubectl logs -f event-simulator-pod Nếu có nhiều containers trong một pod, bạn phải chỉ định tên của container một cách rõ ràng trong lệnh.\n$ kubectl logs -f \u0026lt;pod-name\u0026gt; \u0026lt;container-name\u0026gt;\r$ kubectl logs -f even-simulator-pod event-simulator K8s Reference Docs https://kubernetes.io/blog/2015/06/cluster-level-logging-with-kubernetes/\n"
},
{
	"uri": "//localhost:1400/vi/4-logging-in-eks/4.2-pod-logging/",
	"title": "Pod logging",
	"tags": [],
	"description": "",
	"content": "Chuẩn bị môi trường cho phần này:\nprepare-environment observability/logging/pods Lệnh này sẽ thực hiện các thay đổi sau vào môi trường lab của bạn:\nCài đặt AWS cho Fluent Bit trong cụm Amazon EKS Bạn có thể xem Terraform áp dụng các thay đổi này ở đây. Theo nguyên tắc Twelve-Factor App manifesto, cung cấp tiêu chuẩn vàng cho việc thiết kế các ứng dụng hiện đại, các ứng dụng container nên đầu ra log của chúng ra stdout và stderr. Điều này cũng được coi là thực hành tốt nhất trong Kubernetes và các hệ thống thu thập log cấp cụm được xây dựng dựa trên tiền đề này.\nKiến trúc ghi log của Kubernetes xác định ba cấp độ phân biệt:\nGhi log cấp cơ bản: khả năng lấy log của các pod bằng cách sử dụng kubectl (ví dụ: kubectl logs myapp - trong đó myapp là một pod đang chạy trong cụm của tôi) Ghi log cấp node: Bộ máy container ghi lại log từ stdout và stderr của ứng dụng, và ghi chúng vào một tập tin log. Ghi log cấp cụm: Xây dựng trên cơ sở ghi log cấp node; một đại diện ghi log chạy trên mỗi node. Đại diện này thu thập log trên hệ thống tệp cục bộ và gửi chúng đến một đích ghi log tập trung như Elasticsearch hoặc CloudWatch. Đại diện thu thập hai loại log: Log của container được ghi lại bởi bộ máy container trên node. Log hệ thống. Kubernetes, mặc định, không cung cấp một giải pháp tự nhiên để thu thập và lưu trữ log. Nó cấu hình runtime của container để lưu log dưới định dạng JSON trên hệ thống tệp cục bộ. Runtime của container - như Docker - chuyển hướng luồng stdout và stderr của container sang một trình điều khiển ghi log. Trong Kubernetes, log của container được ghi vào /var/log/pods/*.log trên node. Kubelet và runtime của container ghi log của chúng vào /var/logs hoặc vào journald, trong các hệ điều hành có systemd. Sau đó, các hệ thống thu thập log trên toàn cụm như Fluentd có thể theo dõi các tệp log này trên node và gửi log để lưu trữ. Các hệ thống thu thập log này thường chạy như DaemonSets trên các node worker.\nTrong lab này, chúng tôi sẽ chỉ ra cách một đại diện ghi log có thể được thiết lập để thu thập log từ các node trong EKS và gửi chúng đến CloudWatch Logs.\n"
},
{
	"uri": "//localhost:1400/vi/4-logging-in-eks/4.2-pod-logging/4.2.2-verify-the-logs-in-cloudwatch/",
	"title": "Verify the logs in CloudWatch",
	"tags": [],
	"description": "",
	"content": "Verify the logs in CloudWatch Trong bài thực hành này, chúng ta sẽ tìm hiểu cách kiểm tra các nhật ký pod Kubernetes được chuyển tiếp bởi Fluent Bit agent triển khai trên mỗi nút tới Amazon CloudWatch Logs. Các thành phần ứng dụng đã triển khai ghi lại nhật ký vào stdout, được lưu trữ trong đường dẫn /var/log/containers/*.log trên mỗi nút.\nĐầu tiên, hãy tái sử dụng các pod cho thành phần ui để đảm bảo nhật ký mới được ghi từ khi chúng ta bật Fluent Bit:\nkubectl delete pod -n ui --all\rkubectl rollout status deployment/ui \\\r-n ui --timeout 30s Bây giờ chúng ta có thể kiểm tra rằng thành phần giao diện người dùng của chúng ta đang tạo ra các nhật ký bằng cách sử dụng trực tiếp kubectl logs:\nkubectl logs -n ui deployment/ui Mở Console CloudWatch Logs để kiểm tra các log này xuất hiện:\nhttps://console.aws.amazon.com/cloudwatch/home?#logsV2:log-groups\nLọc cho fluentbit-cloudwatch để tìm các nhóm log được tạo bởi Fluent Bit:\nChọn /aws/eks/fluentbit-cloudwatch/workload/ui để xem các luồng log, mỗi luồng tương ứng với một pod cá nhân:\nBạn có thể mở rộng một trong các mục log để xem toàn bộ dữ liệu JSON đầy đủ:\n"
},
{
	"uri": "//localhost:1400/vi/4-logging-in-eks/4.1-control-plane-logs/4.1.2-viewing-in-cloudwatch/",
	"title": "Viewing in CloudWatch",
	"tags": [],
	"description": "",
	"content": "Viewing in CloudWatch Hãy xem các logs trong bảng điều khiển CloudWatch Logs:\nhttps://console.aws.amazon.com/cloudwatch/home?#logsV2:log-groups\nLọc cho tiền tố /aws/eks và chọn cluster mà bạn muốn kiểm tra logs:\nBạn sẽ thấy một số luồng log trong nhóm:\nChọn bất kỳ luồng log nào để xem các mục được gửi đến CloudWatch Logs bởi EKS control plane.\n"
},
{
	"uri": "//localhost:1400/vi/6-container-insights-on-eks/6.3-container-insights-data/",
	"title": "Container Insights metrics in Amazon CloudWatch",
	"tags": [],
	"description": "",
	"content": "Container Insights Data với CloudWatch Logs Insights Container Insights thu thập các số liệu bằng cách sử dụng các sự kiện nhật ký hiệu suất bằng cách sử dụng Embedded Metric Format được lưu trữ trong CloudWatch Logs. CloudWatch tự động tạo ra một số số liệu từ các nhật ký mà bạn có thể xem trong bảng điều khiển CloudWatch. Bạn cũng có thể tiến hành phân tích sâu hơn về dữ liệu hiệu suất được thu thập bằng cách sử dụng các truy vấn CloudWatch Logs Insights.\nĐầu tiên, mở bảng điều khiển CloudWatch Log Insights: https://console.aws.amazon.com/cloudwatch/home#logsV2:logs-insights\nGần đầu trang là trình soạn thảo truy vấn. Khi bạn lần đầu tiên mở CloudWatch Logs Insights, hộp này chứa một truy vấn mặc định trả về 20 sự kiện nhật ký gần đây nhất.\nKhi bạn chọn một nhóm nhật ký và chạy truy vấn, CloudWatch Logs Insights tự động phát hiện các trường trong dữ liệu trong nhóm nhật ký và hiển thị chúng trong Các trường đã khám phá ở bên phải. Nó cũng hiển thị một biểu đồ cột của các sự kiện nhật ký trong nhóm nhật ký này theo thời gian. Biểu đồ cột này hiển thị phân phối của các sự kiện trong nhóm nhật ký phù hợp với truy vấn và phạm vi thời gian của bạn, không chỉ các sự kiện được hiển thị trong bảng. Chọn nhóm nhật ký cho cụm EKS của bạn kết thúc bằng /performance.\nTrong trình soạn thảo truy vấn, thay thế truy vấn mặc định bằng truy vấn sau đây và chọn Run query.\nSTATS avg(node_cpu_utilization) as avg_node_cpu_utilization by NodeName\r| SORT avg_node_cpu_utilization DESC Đoạn truy vấn này hiển thị danh sách các node, được sắp xếp theo mức sử dụng trung bình của CPU của node. Để thử một ví dụ khác, thay thế truy vấn đó bằng một truy vấn khác và chọn Run query.\nSTATS avg(number_of_container_restarts) as avg_number_of_container_restarts by PodName\r| SORT avg_number_of_container_restarts DESC Truy vấn này hiển thị danh sách các pods của bạn, được sắp xếp theo số lần khởi động lại trung bình của container.\n"
},
{
	"uri": "//localhost:1400/vi/3-view-resources-in-eks-console/3.3-service-and-networking/",
	"title": "Service and Networking",
	"tags": [],
	"description": "",
	"content": "Service and Networking Services and Endpoints Service resource view hiển thị tất cả các dịch vụ mà expose ứng dụng đang chạy trên một tập hợp các pods trong một cluster. Nếu bạn chọn service cart, phần hiển thị sẽ bao gồm thông tin về dịch vụ trong phần Info bao gồm selector (Tập hợp các pods mà dịch vụ đích đến thường được xác định bởi một selector), giao thức và cổng mà nó đang chạy và bất kỳ labels và annotations nào.\nPods expose chính mình thông qua các endpoints đến một dịch vụ. Một endpoint là một resource mà nhận một địa chỉ IP và cổng của các pods được gán động đến nó. Một endpoint được tham chiếu bởi một dịch vụ Kubernetes.\nĐối với ứng dụng mẫu này, nhấp vào Endpoints và nó sẽ liệt kê tất cả các endpoints cho cluster của bạn.\nNhấp vào endpoint của catalog và khi bạn khám phá chi tiết bạn có thể thấy địa chỉ IP và cổng được liên kết với endpoint cùng với các phần Info, Labels và Annotations.\n"
},
{
	"uri": "//localhost:1400/vi/5-eks-open-source-observability/5.3-accessing-grafana/",
	"title": "Truy cập Grafana",
	"tags": [],
	"description": "",
	"content": "Truy cập Grafana Một instance của Grafana đã được cài đặt sẵn trong cụm EKS của bạn. Để truy cập nó, bạn cần trước tiên lấy URL: kubectl get ingress -n grafana grafana -o=jsonpath=\u0026#39;{.status.loadBalancer.ingress[0].hostname}\u0026#39; Mở URL này trong trình duyệt sẽ hiển thị màn hình đăng nhập. Để lấy thông tin xác thực cho người dùng, truy vấn bí mật được tạo bởi biểu đồ helm Grafana: kubectl get -n grafana secrets/grafana -o=jsonpath=\u0026#39;{.data.admin-user}\u0026#39; | base64 -d\rkubectl get -n grafana secrets/grafana -o=jsonpath=\u0026#39;{.data.admin-password}\u0026#39; | base64 -d Sau khi đăng nhập vào bảng điều khiển Grafana, hãy xem phần nguồn dữ liệu. Bạn sẽ thấy không gian dữ liệu đã được cấu hình làm nguồn dữ liệu cho Amazon Managed Service for Prometheus. "
},
{
	"uri": "//localhost:1400/vi/3-view-resources-in-eks-console/",
	"title": "View resources in EKS console",
	"tags": [],
	"description": "",
	"content": "View resources in EKS console Các bước chuẩn bị "
},
{
	"uri": "//localhost:1400/vi/4-logging-in-eks/4.1-control-plane-logs/4.1.3-cloudwatch-log-insights/",
	"title": "Viewing in CloudWatch",
	"tags": [],
	"description": "",
	"content": "CloudWatch Logs Insights cho phép bạn tìm kiếm và phân tích dữ liệu log của bạn trong CloudWatch Logs một cách tương tác. Bạn có thể thực hiện các truy vấn để giúp bạn phản ứng một cách hiệu quả hơn và hiệu quả hơn đối với các vấn đề vận hành. Nếu có vấn đề xảy ra, bạn có thể sử dụng CloudWatch Logs Insights để xác định nguyên nhân tiềm ẩn và xác nhận các sửa đổi đã triển khai. Nó bao gồm một ngôn ngữ truy vấn được xây dựng với một số lệnh đơn giản nhưng mạnh mẽ.\nTrong bài thực hành này, chúng ta sẽ xem một ví dụ về việc sử dụng CloudWatch Log Insights để truy vấn các logs điều khiển EKS. Trước tiên, điều hướng đến CloudWatch Log Insights trong bảng điều khiển:\nhttps://console.aws.amazon.com/cloudwatch/home#logsV2:logs-insights\nBạn sẽ nhìn thấy một màn hình giống như sau:\nMột trường hợp sử dụng phổ biến cho CloudWatch Log Insights là xác định các thành phần trong một cụm EKS đang tạo ra một lượng lớn các yêu cầu đến máy chủ API Kubernetes. Một cách để làm điều này là với truy vấn sau:\nfields userAgent, requestURI, @timestamp, @message\r| filter @logStream ~= \u0026#34;kube-apiserver-audit\u0026#34;\r| stats count(userAgent) as count by userAgent\r| sort count desc Truy vấn này kiểm tra các log kiểm toán Kubernetes và đếm số lượng yêu cầu API được thực hiện được nhóm theo userAgent và sắp xếp chúng theo thứ tự giảm dần. Trong bảng điều khiển Log Insights, chọn nhóm log cho cụm EKS của bạn.\nSao chép truy vấn vào bảng điều khiển và nhấn Chạy truy vấn, điều này sẽ trả về kết quả:\nThông tin này có thể rất quý giá để hiểu rõ các thành phần nào đang gửi yêu cầu đến máy chủ API.\n"
},
{
	"uri": "//localhost:1400/vi/6-container-insights-on-eks/6.4-application-metrics/",
	"title": "Application Metrics in Amazon CloudWatch",
	"tags": [],
	"description": "",
	"content": "Đo lường Ứng dụng trong Amazon CloudWatch 1.Trong phần này, chúng ta sẽ tìm hiểu cách nhận được thông tin về các chỉ số được tiết lộ bởi các công việc của chúng ta và hiển thị các chỉ số đó bằng cách sử dụng Amazon CloudWatch Insights Prometheus. Một số ví dụ về các chỉ số này có thể là:\nCác chỉ số hệ thống như chỉ số Java heap hoặc trạng thái của bể kết nối cơ sở dữ liệu Các chỉ số ứng dụng liên quan đến các chỉ số KPI kinh doanh Hãy xem cách nhập các chỉ số ứng dụng bằng cách sử dụng AWS Distro cho OpenTelemetry và hiển thị các chỉ số bằng cách sử dụng Amazon CloudWatch.\nMỗi trong các thành phần trong bộ công cụ này đã được trang bị để cung cấp các chỉ số Prometheus bằng cách sử dụng các thư viện phù hợp với ngôn ngữ lập trình hoặc framework cụ thể. Chúng ta có thể xem một ví dụ về các chỉ số này từ dịch vụ đặt hàng như sau:\nkubectl -n orders exec deployment/orders -- curl http://localhost:8080/actuator/prometheus Kết quả từ lệnh này là verbose, cho mục đích của bài lab này, hãy tập trung vào chỉ số - watch_orders_total:\nwatch_orders_total: Chỉ số ứng dụng - Số đơn hàng đã được đặt qua cửa hàng bán lẻ Bạn có thể thực hiện các yêu cầu tương tự đối với các thành phần khác, ví dụ như dịch vụ thanh toán: kubectl -n checkout exec deployment/checkout -- curl http://localhost:8080/metrics Trong bài thực hành này, chúng ta sẽ tận dụng CloudWatch Container Insights Prometheus Support với AWS Distro for OpenTelemetry để thu thập các số liệu từ tất cả các thành phần và xây dựng Bảng điều khiển Amazon CloudWatch để hiển thị số lượng đơn hàng đã được đặt. Có hai phần cần giải quyết để tích hợp Prometheus với CloudWatch Container Insights Prometheus. Phần đầu tiên là lấy các số liệu từ Prometheus từ các pod ứng dụng. Vấn đề thứ hai là hiển thị chúng trong định dạng đặc biệt của CloudWatch với các bộ siêu dữ liệu đúng.\nĐầu tiên, chúng ta phải thu thập các số liệu từ các pod ứng dụng. Cấu hình OpenTelemetry để thực hiện điều này được mô tả chi tiết dưới đây: kubectl -n other get opentelemetrycollector adot-container-ci -o jsonpath=\u0026#39;{.spec.config}\u0026#39; \\\r| yq \u0026#39;.receivers.prometheus.config.scrape_configs[2]\u0026#39; Cấu hình này tận dụng cơ chế khám phá dịch vụ Kubernetes của Prometheus để tự động phát hiện tất cả các pod có các chú thích cụ thể. Cấu hình cụ thể này sẽ phát hiện bất kỳ pod nào có chú thích prometheus.io/scrape và sẽ làm giàu các số liệu mà nó thu thập được với dữ liệu siêu dữ liệu Kubernetes như namespace và tên pod.\nĐể hỗ trợ CloudWatch Container Insights Prometheus, chúng tôi xuất các số liệu với các kích thước cụ thể trong Định dạng Số liệu Nhúng - EMF. Bộ xuất CloudWatch EMF chuyển đổi dữ liệu số liệu thành các sự kiện nhật ký hiệu suất với EMF và sau đó gửi nó trực tiếp đến một nhóm nhật ký CloudWatch bằng cách sử dụng API PutLogEvents.\nkubectl -n other get opentelemetrycollector adot-container-ci -o jsonpath=\u0026#39;{.spec.config}\u0026#39; \\\r| yq \u0026#39;.exporters.awsemf/prometheus\u0026#39; Pipeline được xác định trong tập tin cấu hình opentelemetrycollector.yaml. Một pipeline xác định luồng dữ liệu trong bộ thu thập OpenTelemetry và bao gồm việc nhận, xử lý và xuất các chỉ số. Trong mỗi giai đoạn, có thể có nhiều thành phần và chúng có thể chạy tuần tự (bộ xử lý) hoặc song song (bộ nhận, bộ xuất). Bên trong, tất cả các thành phần giao tiếp bằng cách sử dụng các mô hình dữ liệu thống nhất của OpenTelemetry để các thành phần từ các nhà cung cấp khác nhau có thể làm việc cùng nhau. Các bộ nhận thu thập dữ liệu từ các hệ thống nguồn và chuyển đổi chúng thành các mô hình nội bộ. Các bộ xử lý có thể lọc và sửa đổi các chỉ số. Các bộ xuất chuyển đổi dữ liệu sang các schema khác và gửi đến các hệ thống đích. Từ cấu hình này, các chỉ số của bạn từ đơn hàng sẽ được cung cấp dưới không gian tên chỉ số CloudWatch ContainerInsights/Prometheus với các kích thước pod và productId theo cài đặt cấu hình của bộ xuất. kubectl -n other get opentelemetrycollector adot-container-ci -o jsonpath=\u0026#39;{.spec.config}\u0026#39; \\\r| yq \u0026#39;.service\u0026#39; Bây giờ khi chúng ta đã hoàn thành cài đặt, chúng ta sẽ sử dụng đoạn mã dưới đây để chạy một công cụ tạo tải mà sẽ đặt các đơn hàng thông qua cửa hàng và tạo ra các chỉ số ứng dụng: cat \u0026lt;\u0026lt;EOF | kubectl apply -f -\rapiVersion: v1\rkind: Pod\rmetadata:\rname: load-generator\rnamespace: other\rspec:\rcontainers:\r- name: artillery\rimage: artilleryio/artillery:2.0.0-31\rargs:\r- \u0026#34;run\u0026#34;\r- \u0026#34;-t\u0026#34;\r- \u0026#34;http://ui.ui.svc\u0026#34;\r- \u0026#34;/scripts/scenario.yml\u0026#34;\rvolumeMounts:\r- name: scripts\rmountPath: /scripts\rinitContainers:\r- name: setup\rimage: public.ecr.aws/aws-containers/retail-store-sample-utils:load-gen.0.4.0\rcommand:\r- bash\rargs:\r- -c\r- \u0026#34;cp /artillery/* /scripts\u0026#34;\rvolumeMounts:\r- name: scripts\rmountPath: \u0026#34;/scripts\u0026#34;\rvolumes:\r- name: scripts\remptyDir: {}\rEOF Mở bảng điều khiển CloudWatch và điều hướng đến phần Dashboards: Chọn bảng điều khiển Order-Service-Metrics để xem các panel trong bảng điều khiển đó: Chúng ta có thể xem cách bảng điều khiển được cấu hình để truy vấn CloudWatch bằng cách di chuột qua tiêu đề của bảng Orders by Product và nhấp vào nút Edit: Đoạn truy vấn được sử dụng để tạo bảng điều này được hiển thị ở cuối trang: SELECT COUNT(watch_orders_total) FROM \u0026#34;ContainerInsights/Prometheus\u0026#34; WHERE productId != \u0026#39;*\u0026#39; GROUP BY productId Đoạn truy vấn này thực hiện các bước sau:\nTruy vấn cho metric watch_orders_total Bỏ qua các metric có giá trị productId là * Tổng hợp các metric này và nhóm chúng theo productId Khi bạn hài lòng với việc quan sát các metric, bạn có thể dừng load generator bằng cách sử dụng lệnh sau. kubectl delete pod load-generator -n other "
},
{
	"uri": "//localhost:1400/vi/5-eks-open-source-observability/5.4-cluster-dashboards/",
	"title": "Bảng điều khiển Cluster",
	"tags": [],
	"description": "",
	"content": "Bảng điều khiển Cluster Hãy chuyển đến phần bảng điều khiển và hình dung các chỉ số của cụm EKS được thu thập bởi AWS Distro cho Opentelemetry. Nhấp vào bảng điều khiển Kubernetes Cluster Monitoring và chúng ta sẽ xem xét một bảng điều khiển trong bảng điều khiển. Bảng điều khiển Sử Dụng Tổng Cộng hiển thị tổng quan về việc sử dụng của cụm theo CPU, Bộ nhớ và Sử dụng File hệ thống. "
},
{
	"uri": "//localhost:1400/vi/3-view-resources-in-eks-console/3.4-config-and-secrets/",
	"title": "Config and Secrets",
	"tags": [],
	"description": "",
	"content": "Config and Secrets Để xem tài nguyên Kubernetes ConfigMap và Secrets, hãy nhấp vào tab Resources. Tiếp tục vào phần Config và secrets và bạn có thể xem một số loại tài nguyên API Kubernetes mà là phần của ConfigMap và Secrets API. Bài thực hành lab này mô tả các tài nguyên mà Kubernetes cung cấp để cấu hình các workloads với dữ liệu không bảo mật sử dụng ConfigMap và dữ liệu nhạy cảm sử dụng Secrets.\nConfigMaps là một đối tượng tài nguyên của Kubernetes được sử dụng để lưu trữ dữ liệu cấu hình dưới định dạng key-value. ConfigMaps hữu ích để lưu trữ biến môi trường, tham số dòng lệnh, cấu hình ứng dụng có thể được truy cập bởi các ứng dụng triển khai trong các pod. ConfigMaps cũng có thể được lưu trữ dưới dạng các tệp cấu hình trong một khối lưu trữ. Điều này giúp tách biệt dữ liệu cấu hình khỏi mã ứng dụng.\nNhấp vào ConfigMap drill down và bạn có thể xem tất cả các cấu hình cho cụm máy chủ.\nNếu bạn nhấp vào ConfigMap checkout, bạn có thể xem các thuộc tính liên quan đến nó, trong trường hợp này, key REDIS_URL với giá trị của địa chỉ endpoint của redis. Như bạn thấy, giá trị không được mã hóa và ConfigMaps không nên được sử dụng để lưu trữ bất kỳ cặp key-value nào có tính bảo mật.\nSecrets là một đối tượng tài nguyên Kubernetes dùng để lưu trữ các dữ liệu nhạy cảm như tên người dùng, mật khẩu, token và các thông tin chứng thực khác. Secrets hữu ích để tổ chức và phân phối thông tin nhạy cảm qua các pod trong một cụm. Secrets có thể được sử dụng theo nhiều cách khác nhau, như được gắn kết như các thư mục dữ liệu hoặc được tiết lộ như các biến môi trường để sử dụng bởi một container trong một Pod.\nNhấp vào liên kết Secrets để xem tất cả các secrets cho cụm.\nNếu bạn nhấp vào Secrets checkout-config, bạn có thể xem các secrets liên quan đến nó. Trong trường hợp này, lưu ý token được mã hóa. Bạn nên thấy giá trị giải mã cũng với nút chuyển đổi giải mã.\n"
},
{
	"uri": "//localhost:1400/vi/4-logging-in-eks/",
	"title": "Logging in EKS",
	"tags": [],
	"description": "",
	"content": "Logging in EKS Trong Kubernetes, việc ghi log có thể được chia thành ghi log của control plane, ghi log của node và ghi log của ứng dụng. Control plane của Kubernetes là một bộ các thành phần quản lý các cụm Kubernetes và tạo ra các log được sử dụng cho mục đích kiểm toán và chẩn đoán. Với Amazon EKS, bạn có thể bật log cho các thành phần control plane khác nhau và gửi chúng đến Amazon CloudWatch.\nCác container được nhóm lại thành các Pod trong một cụm Kubernetes và được lên lịch để chạy trên các node Kubernetes của bạn. Hầu hết các ứng dụng container viết vào standard output và standard error, và engine của container chuyển hướng đầu ra đến một driver ghi log. Trong Kubernetes, các log của container được tìm thấy trong thư mục /var/log/pods trên một node. Bạn có thể cấu hình CloudWatch và Container Insights để ghi lại các log này cho mỗi Pod của Amazon EKS của bạn.\nTrong lab này, chúng ta sẽ:\nLàm thế nào để bật log Control Plane của EKS và xác minh nó trong Amazon CloudWatch Làm thế nào để thiết lập agent ghi log (Fluent Bit) để stream các log của Pod đến Amazon CloudWatch "
},
{
	"uri": "//localhost:1400/vi/5-eks-open-source-observability/5.5-application-metrics/",
	"title": "Application Metrics",
	"tags": [],
	"description": "",
	"content": "Application Metrics Trong phần này, chúng ta sẽ tìm hiểu cách nhận thông tin từ các chỉ số do các công việc của chúng ta tiết lộ. Một số ví dụ về chúng có thể là:\nChỉ số hệ thống như chỉ số Java heap hoặc trạng thái hồ bơi kết nối cơ sở dữ liệu Chỉ số ứng dụng liên quan đến các KPI kinh doanh Hãy xem cách nhập chỉ số ứng dụng bằng cách sử dụng AWS Distro cho OpenTelemetry và biểu đồ hóa các chỉ số bằng cách sử dụng Grafana.\nMỗi thành phần trong bộ công cụ này đã được đặt dụng để cung cấp các chỉ số Prometheus bằng cách sử dụng thư viện phù hợp với ngôn ngữ lập trình hoặc framework cụ thể. Chúng ta có thể xem một ví dụ về các chỉ số từ dịch vụ đặt hàng như sau: kubectl -n orders exec deployment/orders -- curl http://localhost:8080/actuator/prometheus Đầu ra từ lệnh này có tính chi tiết nên ví dụ trên đã được rút gọn để hiển thị: Thông số hệ thống - Số lượng kết nối JDBC đang trống Thông số ứng dụng - Số lượng đơn hàng đã được đặt qua cửa hàng bán lẻ Bạn có thể thực hiện các yêu cầu tương tự đối với các thành phần khác, ví dụ như dịch vụ thanh toán: kubectl -n checkout exec deployment/checkout -- curl http://localhost:8080/metrics Trong bài thực hành này, chúng ta sẽ tận dụng ADOT để tiếp nhận các chỉ số cho tất cả các thành phần và khám phá một bảng điều khiển để hiển thị số lượng đơn hàng đã được đặt. Hãy nhìn vào cấu hình OpenTelemetry được sử dụng để thu thập các chỉ số từ các pod ứng dụng, cụ thể là phần này: kubectl -n other get opentelemetrycollector adot -o jsonpath=\u0026#39;{.spec.config}\u0026#39; \\\r| yq \u0026#39;.receivers.prometheus.config.scrape_configs[2]\u0026#39; Cấu hình này tận dụng cơ chế phát hiện dịch vụ Prometheus trên Kubernetes để tự động khám phá tất cả các pod có các chú thích cụ thể. Cấu hình cụ thể này sẽ khám phá bất kỳ pod nào có chú thích prometheus.io/scrape, và sẽ bổ sung thông tin về chỉ số mà nó khám phá bằng dữ liệu siêu dữ liệu Kubernetes như namespace và tên pod. Chúng ta có thể kiểm tra các chú thích trên các pod của thành phần đặt hàng:\nkubectl get -o yaml -n orders deployment/orders | yq \u0026#39;.spec.template.metadata.annotations\u0026#39; Như chúng ta đã thấy trong phần về các chỉ số của cluster, những chỉ số của pod này cũng sẽ được gửi đến AMP bằng cách sử dụng cùng một công cụ xuất dữ liệu OpenTelemetry. Tiếp theo, sử dụng đoạn mã dưới đây để chạy một công cụ tạo tải, sẽ đặt các đơn hàng thông qua cửa hàng và tạo ra các chỉ số ứng dụng: cat \u0026lt;\u0026lt;EOF | kubectl apply -f -\rapiVersion: v1\rkind: Pod\rmetadata:\rname: load-generator\rnamespace: other\rspec:\rcontainers:\r- name: artillery\rimage: artilleryio/artillery:2.0.0-31\rargs:\r- \u0026#34;run\u0026#34;\r- \u0026#34;-t\u0026#34;\r- \u0026#34;http://ui.ui.svc\u0026#34;\r- \u0026#34;/scripts/scenario.yml\u0026#34;\rvolumeMounts:\r- name: scripts\rmountPath: /scripts\rinitContainers:\r- name: setup\rimage: public.ecr.aws/aws-containers/retail-store-sample-utils:load-gen.0.4.0\rcommand:\r- bash\rargs:\r- -c\r- \u0026#34;cp /artillery/* /scripts\u0026#34;\rvolumeMounts:\r- name: scripts\rmountPath: \u0026#34;/scripts\u0026#34;\rvolumes:\r- name: scripts\remptyDir: {}\rEOF Mở Grafana như chúng ta đã làm trong phần trước: Đi đến trang bảng điều khiển và nhấp vào bảng điều khiển Order Service Metrics để xem lại các bảng trong bảng điều khiển: Chúng ta có thể xem cách bảng điều khiển được cấu hình để truy vấn AMP bằng cách di chuột qua tiêu đề của bảng Orders by Product và nhấp vào nút \u0026ldquo;Edit\u0026rdquo;: Truy vấn PromQL được sử dụng để tạo bảng điều này được hiển thị ở cuối trang: Trong trường hợp này, chúng ta đang sử dụng truy vấn: sum by(productId) (watch_orders_total{productId!=\u0026#34;*\u0026#34;}) Truy vấn này thực hiện các bước sau: Truy vấn cho chỉ số watch_orders_total Bỏ qua các chỉ số có giá trị productId là * Tổng hợp các chỉ số này và nhóm chúng theo productId Bạn cũng có thể khám phá các bảng điều khiển khác để hiểu cách chúng được tạo ra. Khi bạn hài lòng với việc quan sát các chỉ số, bạn có thể dừng máy tạo tải bằng lệnh dưới đây. kubectl delete pod load-generator -n other "
},
{
	"uri": "//localhost:1400/vi/5-eks-open-source-observability/",
	"title": "EKS open source observability",
	"tags": [],
	"description": "",
	"content": "EKS open source observability Mở CloudWatch Logs console để kiểm tra các log này có xuất hiện:\nTRƯỚC KHI BẮT ĐẦU Chuẩn bị môi trường cho phần này:\nprepare-environment observability/oss-metrics Điều này sẽ thực hiện các thay đổi sau vào môi trường lab của bạn:\nCài đặt phần bổ sung quản lý EKS cho AWS Distro cho OpenTelemetry Tạo một vai trò IAM cho bộ thu thập ADOT để truy cập Amazon Managed Prometheus Bạn có thể xem Terraform áp dụng các thay đổi này tại đây.\nTrong lab này, chúng ta sẽ thu thập các số liệu từ ứng dụng bằng cách sử dụng AWS Distro cho OpenTelemetry, lưu trữ các số liệu trong Amazon Managed Service for Prometheus và trực quan hóa bằng cách sử dụng Amazon Managed Grafana.\nAWS Distro cho OpenTelemetry là một bản phân phối được hỗ trợ bởi AWS, an toàn và sẵn sàng cho sản xuất của dự án OpenTelemetry. Là một phần của Cloud Native Computing Foundation, OpenTelemetry cung cấp các API, thư viện và agent mã nguồn mở để thu thập các dấu vết phân tán và số liệu cho việc giám sát ứng dụng. Với AWS Distro cho OpenTelemetry, bạn chỉ cần instrument ứng dụng của mình một lần để gửi các số liệu và dấu vết tương quan đến nhiều giải pháp giám sát của AWS và đối tác. Sử dụng các agent tự động instrument để thu thập các dấu vết mà không cần thay đổi mã của bạn. AWS Distro cho OpenTelemetry cũng thu thập dữ liệu về siêu dữ liệu từ tài nguyên AWS và các dịch vụ quản lý, giúp bạn liên kết dữ liệu hiệu suất ứng dụng với dữ liệu cơ sở hạ tầng bên dưới, giảm thiểu thời gian trung bình để giải quyết vấn đề. Sử dụng AWS Distro cho OpenTelemetry để instrument các ứng dụng đang chạy trên Amazon Elastic Compute Cloud (EC2), Amazon Elastic Container Service (ECS), và Amazon Elastic Kubernetes Service (EKS) trên EC2, AWS Fargate, và AWS Lambda, cũng như on-premises.\nAmazon Managed Service for Prometheus là một dịch vụ giám sát cho các số liệu tương thích với dự án mã nguồn mở Prometheus, giúp bạn dễ dàng giám sát môi trường container một cách an toàn hơn. Amazon Managed Service for Prometheus là một giải pháp để giám sát các container dựa trên dự án Prometheus của Cloud Native Computing Foundation (CNCF). Amazon Managed Service for Prometheus giảm bớt công việc nặng nề cần thiết để bắt đầu giám sát ứng dụng trên Amazon Elastic Kubernetes Service và Amazon Elastic Container Service, cũng như các cụm Kubernetes tự quản lý.\n"
},
{
	"uri": "//localhost:1400/vi/6-container-insights-on-eks/",
	"title": "Container Insights on EKS",
	"tags": [],
	"description": "",
	"content": "Container Insights on EKS Chuẩn bị môi trường cho phần này: prepare-environment observability/container-insights Lệnh này sẽ thực hiện các thay đổi sau vào môi trường thí nghiệm của bạn: Cài đặt tiện ích quản lý EKS cho AWS Distro for OpenTelemetry Tạo một vai trò IAM cho bộ sưu tập ADOT để truy cập CloudWatch Trong bài lab này, chúng ta sẽ tìm hiểu cách bật và sử dụng CloudWatch Container Insights để thu thập, tổng hợp và tóm tắt các chỉ số và logs từ các ứng dụng và dịch vụ microservices được container hóa của bạn. Container Insights có sẵn cho Amazon Elastic Container Service (Amazon ECS), Amazon Elastic Kubernetes Service (Amazon EKS) và các nền tảng Kubernetes trên Amazon EC2. Hỗ trợ Amazon ECS bao gồm cả hỗ trợ cho Fargate.\nCác chỉ số bao gồm việc sử dụng tài nguyên như CPU, bộ nhớ, ổ đĩa và mạng. Container Insights cũng cung cấp thông tin chẩn đoán, như lỗi khởi động lại container, để giúp bạn phân định vấn đề và giải quyết chúng một cách nhanh chóng. Bạn cũng có thể đặt cảnh báo CloudWatch trên các chỉ số mà Container Insights thu thập.\nCác chỉ số mà Container Insights thu thập có sẵn trong các bảng điều khiển tự động của CloudWatch. Bạn có thể phân tích và gỡ lỗi dữ liệu hiệu suất và logs của container với CloudWatch Logs Insights.\nDữ liệu vận hành được thu thập dưới dạng sự kiện log hiệu suất. Đây là các mục nhập sử dụng một lược đồ JSON có cấu trúc cho phép dữ liệu với độ phức tạp cao được hấp thụ và lưu trữ tỉ lệ. Từ dữ liệu này, CloudWatch tạo ra các chỉ số tổng hợp ở cấp độ cluster, node, pod, task và service như là các chỉ số CloudWatch.\n7.Chúng ta sẽ thiết lập Container Insights để thu thập các chỉ số từ cluster Amazon EKS bằng cách sử dụng bộ thu thập AWS Distro for OpenTelemetry.\n"
},
{
	"uri": "//localhost:1400/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1400/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]